
// Command to not over-ask for more resources than are on the computer
// Useful for test environments
// Function to ensure that resource requirements don't go beyond
// a maximum limit
// From https://github.com/nextflow-io/nextflow/issues/640
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}

process {

  cpus = { check_max( 1 * task.attempt, 'cpus') }
  memory = { check_max( 8.GB * task.attempt, 'memory') }
  time = { check_max( 2.h * task.attempt, 'time') }


  maxRetries = 3
  maxErrors = '-1'

  // Resource requirements
  withName: sourmash_compare_sketches {
    memory = { check_max( 512.GB * task.attempt, 'memory') }
    cpus = 1
  }
  withName: sourmash_compute_sketch {
    memory = { check_max( 4.GB * task.attempt, 'memory') }
    cpus = 1
  }

}
