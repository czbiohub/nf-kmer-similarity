params {
  // Pipeline Options
  read_pairs = "data/*{1,2}.fastq.gz"
  read_singles = false
  samples = false
  samples_singles = false
  read_paths = false
  csv_pairs = false
  csv_singles = false
  fastas = false
  sra = false
  molecules ='dna,protein'
  ksizes = '21,27,33,51'
  log2_sketch_sizes = '10,12,14,16'
  one_signature_per_record = false

  // Boilerplate options
  outdir = './results'
  name = false
  multiqc_config = "$baseDir/assets/multiqc_config.yaml"
  email = false
  plaintext_email = false
  monochrome_logs = false
  help = false
  maxMultiqcEmailFileSize = 25.MB
  igenomes_base = "./iGenomes"
  tracedir = "${params.outdir}/pipeline_info"
  awsqueue = false
  awsregion = 'eu-west-1'
  igenomesIgnore = false
  custom_config_version = 'master'
  custom_config_base = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
  hostnames = false
  config_profile_description = false
  config_profile_contact = false
  config_profile_url = false
}


timeline {
  enabled = true
  file = "${params.tracedir}/execution_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/execution_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/execution_trace.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/pipeline_dag.svg"
}

// Container slug. Stable releases should specify release tag!
// Developmental code should specify :dev
process.container = 'czbiohub/nf-kmer-similarity:dev'

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load nf-core custom profiles from different Institutions
try {
  includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
  System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}

profiles {
  awsbatch { includeConfig 'conf/awsbatch.config' }
  conda { process.conda = "$baseDir/environment.yml" }
  debug { process.beforeScript = 'echo $HOSTNAME' }
  docker { docker.enabled = true }
  singularity { singularity.enabled = true }
  test { includeConfig 'conf/test.config' }
}


// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']


manifest {
  name = 'nf-core/nf-kmer-similarity'
  author = 'Olga Botvinnik'
  homePage = 'https://github.com/czbihoub/nf-kmer-similarity'
  description = 'Compare DNA/RNA/protein sequences on k-mer content'
  mainScript = 'main.nf'
  nextflowVersion = '>=0.32.0'
  version = '1.0dev'
}


// Command to not over-ask for more resources than are on the computer
// Useful for test environments
// Function to ensure that resource requirements don't go beyond
// a maximum limit
// From https://github.com/nextflow-io/nextflow/issues/640
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}

process {

  cpus = { check_max( 1 * task.attempt, 'cpus') }
  memory = { check_max( 8.GB * task.attempt, 'memory') }
  time = { check_max( 2.h * task.attempt, 'time') }


  maxRetries = 3
  maxErrors = '-1'

  // Resource requirements
  withName: sourmash_compare_sketches {
    memory = { check_max( 512.GB * task.attempt, 'memory') }
    cpus = 1
  }
  withName: sourmash_compute_sketch {
    memory = { check_max( 4.GB * task.attempt, 'memory') }
    cpus = 1
  }

}
